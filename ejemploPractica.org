* Práctica 2

** Resumen de la práctica 1
   

El flujo de operación de un microprocesador está indicado en el ciclo
*fetch*, *decode* y *execute*, estas tres etapas de procesamiento
permiten leer un binaro desde memoria y transformarlo a operaciones de
microcódigo para ejecutar cualquier programa (fuente: [[https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf][Intel Architectures Software Developer's Manual]]).

#+CAPTION: Ciclo de ejecución de un programa basado en la arquitectura x86_64. 
#+NAME:   fig:registros
[[./img/pipelineIntel.png]]

La arquitectura x86_64 ofrece 16 registros de propósito general, los
cuales pueden ser utilizados por el programador para fines de
almacenamiento, sin embargo algunos de ellos tienen propósitos
específicos en contextos específicos debido a un legado
cultural. Cuando estos registros no son suficientes se hace uso de la
_pila del sistema_ para extender el espacio de almacenamiento.

#+CAPTION: Registros de propósito general de la arquitectura x86_64. 
#+NAME:   fig:pipelineIntel
[[./img/64BitsRegisters.jpg]]

Existen operaciones que al realizarse generar un efecto secundario:
alterar el estado del registro *RFLAGS*, este registro es utilizado
para obtener información acerca del resultado de una operación
anterior, este registro tiene 64 bits de ancho y es una extensión
directa de su simil de 32 bits (EFLAGS). La comparación entre enteros,
multiplicación, etc.

#+CAPTION: Registro de banderas. 
#+NAME:   fig:RFLAGS
[[./img/rflags.png]]

Dado que la unidad aritmético-lógica del CPU sólo puede realizar
operaciones sobre enteros el único tipo de dato que existe es el
entero, sin embargo, el ensamblador enfatiza la longitud en bits de
cada uno de los enteros sobre los que trabajará. Típicamente existen
cinco longitudes promedio: bytes (8 bits), palabras (2 bytes),
palabras dobles (4 bytes), palabras cuádruples (8 bytes) y palabras
cuádruples dobles (16 bytes). Todas las instrucciones de la ALU operan
sobre enteros de esas longitudes o algún subconjunto de ellas. La
siguiente imagen muestra el tamaño en bytes de cada una de las
longitudes estándar de enteros, además muestra el modelo de
direccionamiento, la dirección más baja de la información está
asociada al primer byte de la misma.

#+CAPTION: Longitud de operandos.
#+NAME: fig:longitud
[[./img/longitud.png]]

La información dentro de la memoria principal del sistema (RAM) sigue
ese mismo modelo de direccionamiento, de esta forma si se tuviera en
memoria principal el valor hexadecimal
~4E127AFE06361FA4230B456774CB3112~ en la dirección ~0H~ de la memoria
RAM este ocuparía 16 bytes en total, terminando en la dirección ~FH~
(16 en hexadecimal, de ahí el sufijo ~H~). Para acceder a partes
específicas de la información se haría uso de bytes, palabras, etc. De
esta forma es posible darle una flexibilidad enorme a la información
en la memoria principal.

#+CAPTION: Acceso a inforamción en memoria
#+NAME: fig:accesoMemoria
[[./img/accesoMemoria.png]]

Aunque la ALU sólo reconoce enteros, es posible utilizar un bit (el
más alto) para distinguir entre enteros negativos y positivos, esta
técnica se extiende al uso de números de punto flotante.

#+CAPTION: Tipos de dato numéricos.
#+NAME: fig:dataType
[[./img/dataTypes.png]]

** Códigos de ejemplo

- Multiplicación de dos números. Si el número resultante es mayor a 64
bits se utilizará el registro ~%rdx~ para acompletar el número, usando
el orden de lectura: ~%rdx:%rax~. El indispensable que el primer valor
a multiplicar se encuentre en ~%rax~.

#+begin_src asm
mov $20, %rax
mov $30, %rbx
mul %rax
#+end_src

- División entre dos números. Al igual que la multiplicación, en la
  división se hace uso de la tupla ~%rdx:%rax~ con la diferencia que
  el dividendo se alojará en la tupla, el divisor puede ir en
  cualquier otro registro. Después de la ejecución de la instrucción
  ~div~ el cociente se almacena en ~%rax~ y el residuo en ~%rdx~.

#+begin_src asm
mov $90, %rax
mov $0, %rdx  ; El dividendo es 0:90
mov $30, %rbx ; El divisor es 30
div %rbx      ; 90/30. El cociente se almacena en %rax
              ; El residuo se almacena en %rdx
#+end_src

- Saltos. Es común que el programador organize su código en bloques
  lógicos que realizan acciones específicas, en ensamblador se
  necesita una etiqueta para poder distinguir bloques de código. Si no
  se especifica una instrucción de retorno o de salto el código se
  ejecuta de manera secuencial.

#+begin_src asm
        mov $0, %rax

for:
        add $1, %rax
        cmp $42, %rax
        jne for
#+end_src

- Funciones. Es un caso específico de los saltos en el que la pila es
  transformada para poder continuar con la siguiente instrucción del
  programa al término de la ejecución de la función. Hay que recordar
  que los resultados de la función se regresan en ~%rax~. Los
  parámetros de una función deben establecerse en el siguiente orden:

  1. ~rdi~ Primer argumento.
  2. ~rsi~ Segundo argumento.
  3. ~rdx~ Tercer argumento.
  4. ~rcx~ Cuarto argumento.
  5. ~r8~ Quinto argumento.
  6. ~r9~ Sexto argumento.

#+begin_src asm
        mov $9, %rdi
        call resta
        mov %rax, %rdi
        mov $60, %rax
        syscall

resta:
        sub $3, %rdi
        mov %rdi, %rax
        ret
#+end_src

  Usando las mismas técnicas podemos llamar varias funciones:

#+begin_src asm
        mov $7, %rdi
        call multiplica
        mov %rax, %rdi
        call salir

multiplica:
        mov %rdi, %rax
        mov $4, %r8
        mov $0, %rdx
        mul %r8
        ret

salir:
        mov $60, %rax
        syscall
#+end_src  

  Si bien podemos escribir varias funciones juntas, es necesario
  guardar el marco de referencia de la pila para que sean compatibles
  con la [[https://uclibc.org/docs/psABI-x86_64.pdf][ABI]] de System V. Básicamente los registros ~rbp~, ~rbx~,
  ~r12~ - ~r15~ necesitan ser guardados al inicio de cada función y
  deben ser restaurados al final de esta.

#+begin_src asm
        // Guardamos el marco de ejecucion anterior
        pushq %rbp
        movq %rsp, %rbp
        // Inicio de programa
        mov $7, %rdi
        call multiplica
        mov %rax, %rdi
        call salir

multiplica:
        // Guardamos el marco de ejecucion anterior
        pushq %rbp
        movq %rsp, %rbp
        // Inicio de la funcion
        mov %rdi, %rax
        mov $4, %r8
        mov $0, %rdx
        mul %r8
        leave
        ret

salir:
        // Guardamos el marco de ejecucion anterior
        pushq %rbp
        movq %rsp, %rbp
        //Inicio de la funcion
        mov $60, %rax
        syscall
#+end_src

** Ejercicios necesarios

1. Jalar los cambios del repositorio.
2. Crear un programa que, dado dos números enteros, determine si
   dichos números son primos relativos.
3. Guardar el programa con el formato ~nombreApellidos.s~
4. Generar un pull request.
