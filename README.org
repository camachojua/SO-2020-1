# Sistemas Operativos 2020-1
* Sistemas Operativos (Laboratorio)
** Esquema
  En el laboratorio introduciremos brevemente algunos
  conceptos teóricos con los que será posible hacer una pequeña
  práctica para aplicar los conocimientos adquiridos.

  El método de calificación es el siguiente:

  | Objeto a evaluar        | Porcentaje |
  |-------------------------+------------|
  | Práctica de laboratorio |        20% |
  | Proyecto intermedio     |        30% |
  | Proyecto final          |        50% |

  Las prácticas de laboratorio son opcionales, así como la asistencia
  al mismo, aunque se calificarán sobre 8.0 los proyectos si éstas no
  son entregadas. Para poder entregar el proyecto final es
  INDISPENSABLE haber entregado en tiempo el proyecto intermedio.

** Fechas de entrega

  | Objeto a evaluar        | Fecha de entrega |
  |-------------------------+------------------|
  | Práctica de laboratorio | Semanalmente     |
  | Proyecto intermedio     | Septiembre 30    |
  | Proyecto final          | Noviembre 22     |

  En principio no hay prórroga sobre las fechas de entrega, aunque
  pueden modificarse de manera personal por motivos bien justificados
  (asuntos personales, laborales o académicos), el entregable
  retrasado será calificado sobre el 80% de su valor máximo.

  Dependiendo de la evolución del grupo se plantean un total de 13
  prácticas (+/- 1). La especificación de los proyectos se darán con
  un mes de anticipación.

** Método de calificación

  Las prácticas y proyectos se pondrán a disposición dentro de un
  repositorio de [[https://github.com/camachojua/SO-2020-1][github]], sobre el cual se harán [[https://help.github.com/en/articles/about-pull-requests][pull-requests]] para
  poder ser calificadas. El [[https://guides.github.com/introduction/flow/][flujo]] de trabajo es:

  1. El alumno clonará el repositorio.
  2. El ayudante publica un [[https://guides.github.com/features/issues/][issue]] en el cual se especificarán los
     requerimientos de la prácitca en turno.
  3. El alumno creará una [[https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging][rama]] para resolver el problema.
  4. El alumno estudiará, discutirá e implementará una solución al
     problema.
  5. El alumno explicará su solución en el [[https://chris.beams.io/posts/git-commit/][mensaje]] del pull-request.
  6. El ayudante revisará los pull-request y aprobará los cambios
     indicando la calificación en el [[Antes de generar el pull-request el alumno][merge]] del mismo.
